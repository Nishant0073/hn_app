import 'package:flutter_test/flutter_test.dart';
import 'package:hn_app/src/article.dart';
import 'package:http/http.dart' as http;

void main() {
  test("parse topStories.json", () {
    const jsonString =
        "[ 32671959, 32673164, 32638598, 32667619, 32670744, 32671018, 32673119, 32673000, 32672970, 32666506, 32665325, 32669215, 32670503, 32673428, 32670354, 32670083, 32672534, 32669800, 32664261, 32656463, 32651197, 32671157, 32672899, 32650990, 32651611, 32668694, 32658364, 32669696, 32651692, 32668081, 32661061, 32666135, 32651357, 32669838, 32669531, 32664841, 32669482, 32666075, 32666049, 32658358, 32651454, 32651476, 32672286, 32662123, 32660825, 32671539, 32660443, 32669344, 32673340, 32670912, 32666035, 32669569, 32650142, 32662666, 32663296, 32657112, 32671570, 32664507, 32670527, 32662466, 32669306, 32662385, 32661499, 32664202, 32659679, 32654023, 32655497, 32661707, 32663897, 32660633, 32666096, 32668092, 32660326, 32659334, 32671688, 32672611, 32671030, 32641028, 32662946, 32671174, 32660957, 32651556, 32670966, 32651777, 32666395, 32672736, 32662133, 32658408, 32634605, 32664049, 32659903, 32664270, 32663319, 32655772, 32658091, 32657941, 32665846, 32658633, 32655347, 32658599, 32669028, 32667398, 32634074, 32663195, 32671431, 32661638, 32666995, 32652291, 32639681, 32657046, 32636249, 32653133, 32669851, 32660669, 32634511, 32628913, 32640733, 32635629, 32658379, 32649864, 32648131, 32669620, 32639301, 32640910, 32660773, 32654734, 32634831, 32660447, 32628196, 32656769, 32648359, 32662083, 32643564, 32654782, 32664352, 32668774, 32667093, 32651186, 32649710, 32668742, 32665621, 32635323, 32651517, 32666964, 32628304, 32647865, 32650626, 32662239, 32671189, 32634038, 32650878, 32653318, 32644277, 32658926, 32671420, 32635906, 32656200, 32636101, 32669007, 32628750, 32649123, 32671319, 32635969, 32669616, 32627597, 32663450, 32649507, 32647227, 32651934, 32659770, 32667070, 32646690, 32637686, 32634711, 32648438, 32649091, 32671611, 32656106, 32649307, 32665587, 32655454, 32652627, 32663289, 32666723, 32664340, 32662431, 32629237, 32649711, 32637996, 32646536, 32667555, 32629669, 32664296, 32666410, 32660321, 32633651, 32661066, 32626576, 32665270, 32656940, 32671297, 32662450, 32642255, 32626787, 32663995, 32659159, 32634729, 32661193, 32628339, 32627841, 32655830, 32662738, 32645501, 32650000, 32639000, 32664877, 32642874, 32627951, 32671031, 32661824, 32638667, 32627723, 32670128, 32667329, 32647642, 32654226, 32656721, 32653962, 32661169, 32664040, 32636682, 32659970, 32652855, 32654493, 32626873, 32655411, 32649273, 32628344, 32663642, 32632720, 32657709, 32629286, 32638456, 32663081, 32663066, 32648245, 32637643, 32667692, 32632079, 32648956, 32631553, 32657155, 32644176, 32668821, 32645822, 32643152, 32628454, 32670466, 32648013, 32659141, 32636412, 32650432, 32648332, 32634496, 32665720, 32630740, 32656985, 32667446, 32667412, 32629857, 32658680, 32669352, 32662484, 32667372, 32656291, 32640918, 32628761, 32648801, 32661597, 32668292, 32660028, 32648171, 32628562, 32639325, 32646440, 32658068, 32647905, 32633382, 32670094, 32666911, 32667985, 32657981, 32637976, 32636221, 32645063, 32656980, 32627396, 32635268, 32668866, 32634327, 32652591, 32656205, 32634828, 32636162, 32669719, 32662152, 32634700, 32653657, 32632533, 32658506, 32652540, 32628124, 32666888, 32654833, 32629624, 32642768, 32644878, 32660286, 32628567, 32645860, 32667182, 32665005, 32650798, 32663279, 32637689, 32635701, 32660307, 32638346, 32628768, 32637008, 32632715, 32659175, 32641788, 32638976, 32630675, 32659668, 32628192, 32632657, 32635849, 32661398, 32652484, 32635725, 32629172, 32641769, 32660013, 32661789, 32652216, 32668928, 32662191, 32639970, 32639833, 32631610, 32665244, 32635336, 32644357, 32666829, 32639791, 32632824, 32629219, 32669596, 32654345, 32664758, 32641259, 32652673, 32668526, 32627017, 32654219, 32636051, 32666279, 32642832, 32642273, 32653276, 32654820, 32628581, 32636068, 32637239, 32641440, 32651489, 32665331, 32628351, 32634226, 32659955, 32638073, 32648681, 32660752, 32631786, 32637783, 32626543, 32649364, 32628367, 32648088, 32654965, 32654854, 32636639, 32645836, 32667243, 32666692, 32630527, 32631872, 32661396, 32627402, 32635910, 32636760, 32656107, 32653745, 32666221, 32659603, 32662873, 32655731, 32665973, 32651515, 32639478, 32663196, 32626629, 32644735, 32655093, 32638593, 32627675, 32669490, 32665351, 32650398, 32647724, 32638000, 32629762, 32647559, 32664975, 32657997, 32627069, 32647671, 32631673, 32661716, 32654448, 32639453, 32658032, 32628812, 32640848, 32635677, 32631394, 32649043, 32653935, 32642627, 32630389, 32630974, 32626837, 32639641, 32656809, 32662026, 32628511, 32633505, 32626574, 32653256, 32658075, 32646002, 32646384, 32627934, 32652021, 32649886, 32627416, 32627423, 32630330, 32669119, 32631845, 32659631, 32647921, 32649382, 32642258, 32647842, 32651973, 32646836, 32655658, 32628820, 32651020, 32659346, 32644852, 32651358, 32658331, 32656387, 32651109, 32650996, 32665889, 32657223, 32638304, 32628381, 32653248, 32631097, 32650157, 32650085, 32665418, 32660052, 32652901, 32639643, 32630243, 32642427, 32630350, 32628468, 32659995, 32637263, 32654728, 32649216, 32630318 ]";
    expect(parseTopStories(jsonString).first, 32671959);
  });

  test("parse article.json", () {
    const jsonString = """{
      "by" : "dhouston",
  "descendants" : 71,
  "id" : 8863,
  "kids" : [ 9224, 8917, 8952, 8958, 8884, 8887, 8869, 8873, 8940, 8908, 9005, 9671, 9067, 9055, 8865, 8881, 8872, 8955, 10403, 8903, 8928, 9125, 8998, 8901, 8902, 8907, 8894, 8870, 8878, 8980, 8934, 8943, 8876 ],
  "score" : 104,
  "time" : 1175714200,
  "title" : "My YC app: Dropbox - Throw away your USB drive",
  "type" : "story",
  "url" : "http://www.getdropbox.com/u/2/screencast.html"}""";

    expect(parseArticle(jsonString).by, "dhouston");
  });
  test("parses item.json over a network", () async {
    final url = Uri.https('hacker-news.firebaseio.com', '/v0/topstories.json');
    final response = await http.get(url);
    // final jsonString = jsonDecode(response.toString());
    if (response.statusCode == 200) {
      final idsList = parseTopStories(response.body);
      if (idsList.isNotEmpty) {}
      final storyUrl = Uri.https(
          'hacker-news.firebaseio.com', '/v0/item/${idsList.first}.json');
      final storyRes = await http.get(storyUrl);
      if (storyRes.statusCode == 200) {
        expect(parseArticle(storyRes.body).by, isNotNull);
      }

      // expect(parseTopStories(jsonString).first, 32686580);
    }
  });
}
